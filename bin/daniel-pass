#!/usr/bin/ruby
# daniel-pass - a throwaway password generator
#
# Copyright Â© 2016 brian m. carlson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'optparse'

fallback = false

begin
  require 'daniel'
rescue LoadError
  raise if fallback
  fallback = true
  $LOAD_PATH.push File.join(File.dirname(__FILE__), '..', 'lib')
  retry
end

module Daniel
  module ThrowawayPass
    class MainProgram < Daniel::Program
      def initialize
        @config = Configuration.new
        @params = @config.parameters(:throwaway)
        @passphrase = @config.passphrase(:throwaway)
        @clipboard = true
        super
      end

      def main(args)
        args = args.dup
        code = parse_args(args)
        generator = PasswordGenerator.new @passphrase
        output_password(generator.generate(code, @params))
      end

      protected

      def parse_args(args)
        OptionParser.new do |opts|
          opts.banner = 'Usage: daniel-pass [-p] CODE'

          opts.on('-p', 'Print passwords to standard output') do
            @clipboard = false
          end

          opts.on('-v VERSION', 'Set the password version') do |ver|
            @params.version = ver
          end
        end.parse!(args)
        args[0].dup
      end

      def output_password(pass)
        if @clipboard
          require 'clipboard' if @clipboard
          Clipboard.copy pass
          puts 'Password copied to clipboard.'
        else
          print pass
        end
      end
    end
  end
end

Daniel::ThrowawayPass::MainProgram.new.main(ARGV) if __FILE__ == $PROGRAM_NAME
